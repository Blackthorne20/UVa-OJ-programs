/*
371 - Ackermann Functions

https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=0&problem=307&mosmsg=Submission+received+with+ID+23115868
*/
#include <iostream>
#include <unordered_map>
//#include <stack>
#include <climits>
#include <algorithm>
using namespace std;

#define endl '\n'

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    unordered_map<int, int> table; // key = starting number, value = the cycle length generated by the Ackerman function
    table[1] = 3;
    table[2] = 1;

    int L, H; // range of numbers to check
    while (cin >> L >> H, L || H)
    {
        if (L > H)
        {
            swap(L, H);
        }

        int maxNum; // number in the range with the longest cycle length
        int maxCycle = INT_MIN;
        for (int i = L; i <= H; i++)
        {
            //stack<int> seq;
            int cycleLength = 0;
            unsigned int n = i;
            bool done = false;
            while (!done)
            {
                if (table.count(n)) // use cached value if it exists
                {
                    cycleLength += table[n];
                    done = true;
                }
                else
                {
                    //seq.push(n);
                    if (n % 2 == 0)
                    {
                        n /= 2;
                    }
                    else
                    {
                        n = 3 * n + 1;
                    }
                    cycleLength++;
                }
            }
            table[i] = cycleLength; // store value in memory

            //int t = table[n];
            //while(!seq.empty())
            //{
            //    table[seq.front()] = t;
            //    seq.pop();
            //    t++;
            //}

            if (cycleLength > maxCycle)
            {
                maxCycle = cycleLength;
                maxNum = i;
            }
        }

        cout << "Between " << L << " and " << H << ", " << maxNum << " generates the longest sequence of " << maxCycle << " values." << endl;
    }

    return 0;
}

